Iterface (till java 1.0-1.7)- was for declare methods
Methods in interface are by default Abstract and public

Abstarct Class : 
Class Ab{
we can have regular methods which has body
 +
 Abstract method
}

In java 8 :
Stream Api : You have methods like stream() , and It was
Introduced in one of the Interface List
List is a Interface of Collection.
It has certaion methods. say x

But in java 1.8 we have extra methods say( x+y )

x were there from 1.2
y new features

Now question is should we change the Interface when its publish ?

Oracle defined stream() methods in List Interface.


interface List {

add();
remove();

void stram(){
//define method
}
 
}
Now whats the difference between Interface and Abstract Class Now?
They both can define methods now.

------------------------------------------
Example: 1.8 only

interface I {
 //declare
 void add(); //abstract

 //mention default keyword here
 default void show(){
 }

} 

Java does'nt support multiple Inheritance
 
Class A       Class B
show()        show()
    
        Class C
 Class C extends A, B{
 C c= new C();
 c.show();// ambiguity : which show to call
 }  
  It is Applicable by Interface
---------------------------------------------------
Before Java 8:
Interface I      Interface J
show();           show();
        Class C Implements I,J 
        {
         Override
         public Void Show(){
         //C will define/implement
         it as per its requirment
         }
         }

-----------------------------------------------------

In java 8:

Interface I                     Interface J
default show(){}                defaultshow(){}
        
        Class C Implements I,J 
        {
         //Will give u error same problem like Diamond Problem  
         c.show();
         
         How to slove it?
         Here again you have to define that method
         so u have to override  it
         public void show(){}
         
         }

------------------------------------------------------------

Interface I {
default void show(){
sop("I");
}
}
Interface J {
default void show(){
sop("J");
}
}
Class A {
void show(){
sop("A");
}
}

Class C extends A{
cObj.show();//A
}

Class C extends A Implements I {
cobj.show();//A
Cause Class has more power than Interface
}
---------------------------------------------------------
java 8:

Interface I{

//This already overrides Object Class method
so this exact method present in Object class
so this will give u a error
default bloolean equals(Object O){
return true;
}

}
















